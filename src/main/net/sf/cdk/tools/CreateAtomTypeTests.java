package net.sf.cdk.tools;

import java.io.File;
import java.io.FileWriter;

import org.openscience.cdk.CDKConstants;
import org.openscience.cdk.config.AtomTypeFactory;
import org.openscience.cdk.interfaces.IAtomType;
import org.openscience.cdk.interfaces.IAtomType.Hybridization;
import org.openscience.cdk.nonotify.NoNotificationChemObjectBuilder;
import org.openscience.cdk.tools.periodictable.PeriodicTable;

public class CreateAtomTypeTests {

	private final static String TEMPLATE =
"// autogenerated\n" +
"package com.github.egonw.odk.atomtypes;\n\n" +
"import junit.framework.Assert;\n\n" +
"import org.junit.Test;\n" +
"import org.junit.runner.RunWith;\n\n" +
"import ch.unibe.jexample.Given;\n" +
"import ch.unibe.jexample.Injection;\n" +
"import ch.unibe.jexample.InjectionPolicy;\n" +
"import ch.unibe.jexample.JExample;\n\n" +
"import com.github.egonw.odk.elements.$ELEMENTCLASSNAME$;\n" +
"import com.github.egonw.odk.interfaces.IAtomType;\n" +
"import com.github.egonw.odk.properties.AtomTypeProperties;\n\n" +
"@RunWith(JExample.class)\n" +
"@Injection(InjectionPolicy.NONE)\n" +
"public class $ATOMTYPECLASSNAME$Test {\n\n" +
"	@Test\n" +
"	public IAtomType createAtomType() {\n" +
"		IAtomType type = $ATOMTYPECLASSNAME$.getInstance();\n" +
"		Assert.assertNotNull(type);\n" +
"		return type;\n" +
"	}\n\n" +
"	@Given(\"createAtomType()\")\n" +
"	public void testLonePairCount(IAtomType type) {\n" +
"		Assert.assertEquals($LPCOUNT$, AtomTypeProperties.getLonePairCount(type));\n" +
"	}\n\n" +
"	@Given(\"createAtomType()\")\n" +
"	public void testElement(IAtomType type) {\n" +
"		Assert.assertEquals(\n" +
"			$ELEMENTCLASSNAME$.getInstance(),\n" +
"			type.getElement()\n" +
"		);\n" +
"	}\n\n" +
"}\n";

	private final static String SUITE_TEMPLATE =
"// autogenerated\n" +
"package com.github.egonw.odk.atomtypes;\n\n" +
"import org.junit.runner.RunWith;\n" +
"import org.junit.runners.Suite;\n" +
"import org.junit.runners.Suite.SuiteClasses;\n\n" +
"@RunWith(value=Suite.class)\n" +
"@SuiteClasses(value={\n" +
"$TESTCLASSES$" +
"})\n" +
"public class AtomTypeTests {}\n";
	

	public static void main(String[] args) throws Exception {
		AtomTypeFactory factory = AtomTypeFactory.getInstance(
			"org/openscience/cdk/dict/data/cdk-atom-types.owl",
			NoNotificationChemObjectBuilder.getInstance()
		);
		StringBuilder testClasses = new StringBuilder();
		for (IAtomType type : factory.getAllAtomTypes()) {
			String symbol = type.getSymbol();
			String elementClassName = upperCase(PeriodicTable.getName(symbol));
			String atomtypeClassName = upperCase(
				removeDots(type.getAtomTypeName())
			);
			StringBuilder orbitals = new StringBuilder();
			if (type.getHybridization() == Hybridization.SP3 &&
				type.getFormalCharge() == 0 &&
				!type.getAtomTypeName().contains("radical")) {
				orbitals.append("xXXXXXXXXXXXXXXXXXXXXXXXXXXXx");
			}

			if (orbitals.toString().length() > 5) {
				String fileContent = TEMPLATE;
				int lpCount = (Integer)type.getProperty(CDKConstants.LONE_PAIR_COUNT);
				fileContent = fileContent.replace("$ELEMENTCLASSNAME$", elementClassName);
				fileContent = fileContent.replace("$ATOMTYPECLASSNAME$", atomtypeClassName);
				fileContent = fileContent.replace("$LPCOUNT$", "" + lpCount);
				if (testClasses.length() > 0)
					testClasses.append(",\n");
				testClasses.append("  " + atomtypeClassName + "Test.class");

				FileWriter fileWriter = new FileWriter(
					new File(
						"src/test/com/github/egonw/odk/atomtypes/" +
						atomtypeClassName + 
						"Test.java"
					)
				);
				fileWriter.append(fileContent);
				fileWriter.close();
			}

			String fileContent = SUITE_TEMPLATE;
			fileContent = fileContent.replace("$TESTCLASSES$", testClasses.toString());
			FileWriter fileWriter = new FileWriter(new File(
				"src/test/com/github/egonw/odk/atomtypes/AtomTypeTests.java"
			));
			fileWriter.append(fileContent);
			fileWriter.close();
		}
		
	}

	private static String removeDots(String atomTypeName) {
		return atomTypeName.replace(".", "");
	}

	private static String upperCase(String name) {
		String result = name.toLowerCase();
		return ("" + result.charAt(0)).toUpperCase() + result.substring(1);
	}

}
