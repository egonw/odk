<project name="ODK" basedir=".">

  <property file="build.props"/>

  <!-- compile options -->
  <property name="build.sysclasspath" value="ignore" />
  <property name="build.compiler" value="modern" />
  <property name="debug" value="on" />
  <property name="deprecation" value="on" />
  <property name="optimization" value="off" />

  <!-- directories -->
  <property name="build" value="build" />
  <property name="build.src" value="${build}/src" />
  <property name="sourcedist" value="sourcedist" />
  <property name="dist" value="dist" />
  <property name="doc" value="doc" />
  <property name="src.dir" value="src" />
  <property name="src.main" value="${src.dir}/main" />
  <property name="src.test" value="${src.dir}/test" />
  <property name="lib" value="jar" />
  <property name="devellib" value="develjar" />
  <property name="reports.tests" value="reports" />
  <property name="metainf" value="${src.dir}/META-INF" />

  <!-- Include the ant-contrib goodies -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${basedir}/develjar/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

  <target id="check" name="check">
    <!-- Check wether Doclets are compiled and output is generated -->
    <uptodate property="dotjavafiles.uptodate"
      targetfile="${src}/core.javafiles">
      <srcfiles dir="${src}" includes="**/*.java" />
    </uptodate>

    <!-- Checks which parts of CDK can be build. -->

    <!-- test for required jars -->
    <available property="vecmath.present" file="${lib}/vecmath1.2-1.14.jar"/>
    <available property="log4j.present"   file="${lib}/log4j.jar"/>

    <!-- test for optional jars -->
    <available property="junit.present"
               classname="junit.framework.TestCase"
               classpath="${ant.home}/lib/junit.jar"/>
  </target>

  <target id="noJunit" name="noJunit" depends="check" unless="junit.present">
    <fail message="JUnit is not installed in Ant. Please run ant with the option '-lib develjar/junit-4.3.1.jar'."/>
  </target>

  <target id="init" name="init" depends="check, setupBuildDir"/>

  <target id="setupBuildDir" name="setupBuildDir">
    <tstamp />
    <mkdir dir="${build}" />
    <mkdir dir="${sourcedist}" />
    <mkdir dir="${dist}" />
    <mkdir dir="${reports.tests}" />
  </target>

  <target id="clean" name="clean" description="Removes autogenerated files.">
    <delete>
      <fileset dir="." includes="**/*~" />
    </delete>

    <delete dir="${build}" />
    <delete dir="${sourcedist}" />
    <delete dir="${dist}" />
    <delete dir="${reports.tests}" />
  </target>

  <target name="runDoclet" id="runDoclet" depends="check">
    <echo>Not skipping doclet run...</echo>
    <mkdir dir="${build}" />
    <javac includes="net/sf/cdk/tools/MakeJavafilesFiles.java"
           srcdir="${src.main}" destdir="${build}" optimize="${optimization}"
           debug="${debug}" deprecation="${deprecation}"/>
    <java classpath="${build}" classname="net.sf.cdk.tools.MakeJavafilesFiles">
      <arg value="${src.main}"/>
      <arg value="${build}"/>
    </java>
    <java classpath="${build}" classname="net.sf.cdk.tools.MakeJavafilesFiles">
      <arg value="${src.test}"/>
      <arg value="${build}"/>
    </java>
  </target>

  <target id="compile-needed-test" name="compile-needed-test">
    <echo message="  ... module ${module-real}" />
    <uptodate property="module-uptodate" targetfile="${dist}/jar/odk-${module-real}.jar">
      <srcfiles dir="${src.main}">
        <includesfile name="${build}/${module-real}.javafiles"/>
      </srcfiles>
    </uptodate>
  </target>

  <target id="compile-init" name="compile-init" depends="init, check, runDoclet"/>

  <target id="compile-module" name="compile-module" depends="check">
    <echo message="Compiling classes for ODK's ${module} module." />
    <mkdir dir="${dist}/jar" />
    <antcall target="compile-module-real">
      <param name="module-real" value="${module}"/>
      <param name="src" value="${src.main}"/>
    </antcall>
    <antcall target="compile-module-real">
      <param name="module-real" value="test-${module}"/>
      <param name="src" value="${src.test}"/>
    </antcall>
  </target>

  <target id="compile-module-real" name="compile-module-real"
          depends="compile-needed-test"
          unless="module-uptodate">
    <echo message="  ... module ${module-real} from source dir ${src}" />

    <!-- check for availability for meta info files -->
    <available file="${metainf}/${module-real}.datafiles" property="module.datafiles.present"/>
    <available file="${metainf}/${module-real}.extrafiles" property="module.extrafiles.present"/>
    <available file="${metainf}/${module-real}.buildfiles" property="module.buildfiles.present"/>
    <available file="${metainf}/${module-real}.cdkdepends" property="module.cdkdepends.present"/>
    <available file="${metainf}/${module-real}.libdepends" property="module.libdepends.present"/>
    <available file="${metainf}/${module-real}.devellibdepends" property="module.devellibdepends.present"/>
    <available file="${metainf}/${module-real}.autogenerated" property="module.autogenerated.present"/>

    <!-- be somewhat informative -->
    <echo message="Datafiles defined: ${module.datafiles.present}"/>
    <echo message="Extra files defined: ${module.extrafiles.present}"/>
    <echo message="CDK dependencies defined: ${module.cdkdepends.present}"/>
    <echo message="Library dependencies defined: ${module.libdepends.present}"/>
    <echo message="Developer Library dependencies defined: ${module.devellibdepends.present}"/>
    <echo message="Autogenerated files specified: ${module.autogenerated.present}"/>

    <!-- normally javac compiles not just the given files, but also missing
          classes that are in the same src/ directory. By making a copy first,
          we explicitely make it impossible to compile files that are not
          marked for a specific module -->
    <delete dir="${build.src}"/>
    <mkdir dir="${build.src}"/>
    <copy todir="${build.src}">
      <fileset dir="${src}">
        <includesfile name="${build}/${module-real}.javafiles"/>
        <includesfile name="${metainf}/${module-real}.autogenerated" if="module.autogenerated.present"/>
      </fileset>
    </copy>

    <!-- ok, now that we have a copy, compile this copy -->
    <javac srcdir="${build.src}" destdir="${build}" optimize="${optimization}"
            debug="${debug}" deprecation="${deprecation}" target="1.5" source="1.5">
      <classpath>
        <fileset dir="${lib}" >
          <exclude name="**/*" unless="module.libdepends.present" />
          <includesfile name="${metainf}/${module-real}.libdepends" if="module.libdepends.present" />
        </fileset>
        <fileset dir="${devellib}">
          <exclude name="**/*" unless="module.devellibdepends.present" />
          <includesfile name="${metainf}/${module-real}.devellibdepends" if="module.devellibdepends.present" />
        </fileset>
        <fileset dir="${dist}/jar">
          <exclude name="**/*" unless="module.cdkdepends.present" />
          <includesfile name="${metainf}/${module-real}.cdkdepends" if="module.cdkdepends.present" />
        </fileset>
      </classpath>

      <includesfile name="${build}/${module-real}.javafiles"/>
      <includesfile name="${metainf}/${module-real}.autogenerated" if="module.autogenerated.present"/>
    </javac>

    <!-- create a autogenerated.classes file, if applicable, so that these files can be included in the jar -->
    <if>
      <istrue value="${module.autogenerated.present}"/>
      <then>
        <copy file="${metainf}/${module-real}.autogenerated" tofile="${build}/${module-real}.autogenerated.classes"
              failonerror="false"/>
        <replace dir="${build}" token=".java" value="*.class">
          <include name="*.autogenerated.classes"/>
        </replace>
      </then>
    </if>

    <!-- and then jar things up into the module jar -->
    <jar jarfile="${dist}/jar/odk-${module-real}.jar">
      <fileset dir="${build}">
        <includesfile name="${build}/${module-real}.classes" />
        <includesfile name="${build}/${module-real}.autogenerated.classes" if="module.autogenerated.present"/>
      </fileset>
      <fileset dir="${build}">
        <include name="${module-real}.javafiles" />
      </fileset>
      <fileset dir="${src}">
        <exclude name="**/*" unless="module.datafiles.present"/>
        <includesfile name="${metainf}/${module-real}.datafiles" if="module.datafiles.present" />
      </fileset>
      <fileset dir="${src}">
        <exclude name="**/*" unless="module.extrafiles.present"/>
        <includesfile name="${metainf}/${module-real}.extrafiles" if="module.extrafiles.present" />
      </fileset>
      <fileset dir="${build}">
        <exclude name="**/*" unless="module.buildfiles.present"/>
        <includesfile name="${metainf}/${module-real}.buildfiles" if="module.buildfiles.present" />
      </fileset>
    </jar>
  </target>

  <target id="dist-all" name="dist-all" description="dist-all">
    <antcall target="compile-init"/>
    <antcall target="compile-module"><param name="module" value="interfaces"/></antcall>
  </target>

  <target id="test-module" name="test-module" depends="noJunit"
          description="Performs a full JUnit test for the ODK." 
          if="junit.present">

    <echo message="Testing classes for ODK's ${module} module." />

    <!-- check for availability for meta info files -->
    <available file="${metainf}/test-${module}.cdkdepends" property="module.cdkdepends.present"/>
    <available file="${metainf}/test-${module}.libdepends" property="module.libdepends.present"/>
    <available file="${metainf}/test-${module}.devellibdepends" property="module.devellibdepends.present"/>

    <!-- be somewhat informative -->
    <echo message="ODK dependencies defined: ${module.cdkdepends.present}"/>
    <echo message="Library dependencies defined: ${module.libdepends.present}"/>
    <echo message="Developer Library dependencies defined: ${module.devellibdepends.present}"/>

    <mkdir dir="${reports.tests}"/>
    <junit printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m">
      <classpath>
        <fileset dir="${lib}" >
          <exclude name="**/*" unless="module.libdepends.present" />
          <includesfile name="${metainf}/test-${module}.libdepends" if="module.libdepends.present" />
        </fileset>
        <fileset dir="${devellib}">
          <exclude name="**/*" unless="module.devellibdepends.present" />
          <includesfile name="${metainf}/test-${module}.devellibdepends" if="module.devellibdepends.present" />
        </fileset>
        <fileset dir="${dist}/jar">
          <exclude name="**/*" unless="module.cdkdepends.present" />
          <includesfile name="${metainf}/test-${module}.cdkdepends" if="module.cdkdepends.present" />
          <include name="odk-test-${module}.jar" />
        </fileset>
      </classpath>
      <test name="net.launchpad.code.odk.test.modulesuites.M${module}Tests"
          haltonfailure="no"
          todir="${reports.tests}"
          outfile="result-${module}">
        <formatter type="brief" />
      </test>
    </junit>
  </target>

</project>
